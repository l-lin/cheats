% video, common

$ input_file: ls -p | grep -v /
$ scheme: echo -e 'rtmp\nrtmps\nrtsp\nrtsps'

% video, ffprobe
@ video, common

# Get video stream information
ffprobe -loglevel 16 -show_streams -show_private_data -print_format flat -i <input_file>

# Show video frame timestamps
ffprobe <input_file> -select_streams v -show_entries frame=coded_picture_number,pkt_pts_time -of csv=p=0:nk=1 -v 0 -pretty | less

# Get video frame numbers
ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_frames -of default=nokey=1:noprint_wrappers=1 -i <input_file>

# Check video I/P/B frames
ffprobe -loglevel 16 -show_frames <input_file> | grep pict_type | sort | uniq -c

# Get video frame information
ffprobe -v quiet -select_streams v -show_frames <input_file> 2>/dev/null

# Get video FPS
ffprobe -show_streams <input_file> 2>&1 \
  | rg fps \
  | awk '{split($0,a,"fps")}END{print a[1]}' \
  | awk '{print $NF}'

% video, ffmpeg
@ video, common

# Concat all MP4 videos
tmp_file=tmp-$(uuidgen)
touch "${tmp_file}"
for f in *.mp4; do
  echo "file '$f'" >> ${tmp_file}
done
ffmpeg -f concat -i "${tmp_file}" -vcodec copy -acodec copy <output_file>
rm "${tmp_file}"

# Add frame count in video
ffmpeg -i <input_file> \
  -vf "drawtext=text=%{n}:fontsize=72:r=60:x=(w-tw)/2: y=h-(2*lh):fontcolor=white:box=1:boxcolor=0x00000099" \
  <output_file>

# Stream video indefinitely to a source
ffmpeg -re -stream_loop 1 -i <input_file> -f flv <scheme>://<url>

# Stream clock to a source
ffmpeg -stream_loop 1 -f lavfi -re \
  -i color=size=1280x720:rate=25:color=black \
  -c:v libx264 \
  -vf "settb=AVTB,setpts='trunc(PTS/1K)*1K+st(1,trunc(RTCTIME/1K))-1K*trunc(ld(1)/1K)',drawtext=text='%{localtime}.%{eif\:1M*t-1K*trunc(t*1K)\:d}':x=(w-text_w)/2:y=(h-text_h)/2:fontsize=80:fontcolor=white" \
  -c:v libx264 \
  -profile:v high \
  -level:v 4.1 \
  -preset veryfast \
  -b:v 3000k \
  -maxrate 3000k \
  -bufsize 6000k \
  -pix_fmt yuv420p \
  -g 50 \
  -keyint_min 50 \
  -sc_threshold 0 \
  -f flv <scheme>://<url>

# Cut video
ffmpeg -ss <from_in_second> -to <to_in_second> -i <input_file> -c copy <output_file>

# Extract only video
ffmpeg -i <input_file> -an -c:v copy <output_file>

# Extract audio only
ffmpeg -i <input_file> -vn -c:a copy <output_file>

# Change resolution to 720p
ffmpeg -i <input_file> \
  -vf scale=1280:720:force_original_aspect_ratio=decrease,pad=1280:720:-1:-1,setsar=1 \
  <output_file>

# Download authenticated HLS stream
ffmpeg -headers "Authorization: Bearer <token>" \
  -i <url_to_playlist_m3u8> \
  -protocol_whitelist file \
  -c copy <output_file>

# Blur video
ffmpeg -i <input_file> \
  -c:v libx264 \
  -video_track_timescale 90000 \
  -bf 0 \
  -pix_fmt "yuv420p" \
  -filter_complex '[0:v]boxblur=20[vout]' \
  -map '[vout]' \
  -f mp4 \
  <output_file>

% video, vlc
@ video, common

# Watch video
vlc <input_file>

# Watch stream
vlc <scheme>://<url>
