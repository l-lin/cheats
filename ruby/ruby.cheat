% ruby

# Open REPL / interactive ruby
irb

# Prints to console with newline.
puts 'Whatever you want'

# Prints to console without newline.
print 'Whatever you want'

; -----------------------------------------------------------------------------

% ruby, string, snippet

# Custom delimiter string to avoid escaping quotes.
str = %(this string is "surrounded" with delimiter so we don't have to escape quotes)

# Concat strings.
str = 'this' + ' ' 'is' << ' '.concat('a ' << 'string')

# Multi-lines string.
str = <<DOC
this is a heredoc
that spans multiple lines
DOC

# Freeze string to prevent it from being modified.
str.freeze

# Check if string contains a sub string.
'string'.include? 'ing'

# Check strings equality.
'foo' == 'bar'
'foo'.eql? 'bar'

# Compare variables.
puts 'foo' <=> 'bar' # -1 if left is lower, 0 if equal, 1 if left is greater

# Compare case insensitive.
'foo'.casecmp('bar')
'foo'.casecmp('Foo')

# Repeat strings.
'Hello ' * 3

# Remove trailing character from the right.
'Hello '.chop # returns 'Hello'

# Remove trailing newling from the right.
"Hello\n".chomp

# Trim whitespace.
"     Hello    ".strip # returns "Hello"

# Reverse string.
'Hello'.reverse

# String interpolation.
name = 'John Doe'
"Hello #{name}"

# Check if a pattern is in a string with regex.
(/a pattern/ =~ 'prefix a pattern suffix').nil? # returns nil if the pattern is not found in string

# Find string with pattern / regex.
'abbcccddddeeeee'[/bc+/] # returns 'bccc'

# Find string with pattern / regex and use captures.
'Name:  Gray, James'[/(\w+), (\w+)/] # returns 'Gray, James'
::Regexp.last_match(1) # returns 'Gray'
::Regexp.last_match(2) # returns 'James'

# Find strings with pattern / regex and return array.
'one two-three'.scan(/\w+/) # return %w[one two three]

# Find and replace string with pattern / regex.
'one two-three'.sub(/(t\w*)/) { ::Regexp.last_match(1)[0, 1] } # returns 'one t-three'

# Find and replace all strings with pattern / regex.
'one two-three'.gsub(/^one /, '') # returns 'two-three'

# Find and replace all strings with pattern / regex using block.
'one two-three'.gsub(/(t\w*)/) { ::Regexp.last_match(1)[0, 1] } # returns 'one t-t'

# Check if a string is blank.
str.strip.empty?

; -----------------------------------------------------------------------------

% ruby, array, snippet

# Create empty array.
arr = Array.new
arr = []

# Append to an array.
arr << a_value # with shovel operator
arr.append(a_value)

# Create array of words.
first_name, last_name = %w[John Doe]

# Create array of words with splat operator.
first_name, *last_name = %w[John Smith III]
assert_equal 'John', first_name
assert_equal %w[Smith III], last_name

# Create array of symbols.
arr = %i[:foo :bar]

# Create array of range from 1 to 10 inclusive.
(1..10).to_a

# Create array of range from 1 to 10 exclusive.
(1...10).to_a

# Create array of character range, 'a' to 'f' exclusive.
('a'...'f').to_a

# Get first element of array.
[1, 2, 3].first
[1, 2, 3][0]

# Get last element of array.
[1, 2, 3].last
[1, 2, 3][-1]

# Get index of element.
[10, 20, 30].index(20) # 1

# Get slice of array.
[1, 2, 3, 4, 5].slice(3, 2) # [4, 5]

# Get min value of array.
[10, 1, 5, 90].min

# Get max value of array.
[10, 1, 5, 90].max

# Check if array contains a value.
arr.include? 10

# Check if array is empty.
arr.is_empty?

# Get array size.
arr.size

# Loop over an array.
arr.each { |nb| puts "This is number #{nb}" }

# Filter values from an array.
arr.reject { |nb| nb < 3 }.each { |nb| puts "This is filtered number #{nb}" }

# Filter values from an array using regex.
animals = ["cat", "bat", "rat", "zat"]
animals.select { |a| a[/[cbr]at/] } # returns %w[cat bat rat]

# Return unique value of array.
unique_arr = array.uniq

# Only keeo unique values of array.
arry.uniq!

# Insert element in a specific index of array.
arr.insert(1, 6)

# Delete an element in array with an index.
arr.delete_at(1) # returns nil if no element was deleted

# Delete an element in array with a value.
arr.delete(10) # returns nil if no element was deleted

# Sort array.
sorted_arr = arr.sort

# Sort reverse
reverse_sorted_arr = arr.sort.reverse

# Pop an element of array.
element = arr.pop

; -----------------------------------------------------------------------------

% ruby, array, iteration, snippet

# Iterating array with each.
array = [1, 2, 3]
sum = 0
array.each do |item|
  break if item > 3
  sum += item
end
array.each { |item| sum += item }

# Transform elements of array with collect.
[1, 2, 3].collect { |item| item + 10 } # returns [11, 12, 13]
[1, 2, 3].map { |item| item + 10 } # returns [11, 12, 13]

# Filter arrays.
[1, 2, 3].select { |item| item.even? } # returns [2]
[1, 2, 3].find_all { |item| item.even? } # returns [2]

# Find first element of array.
[1, 2, 3].find { |item| item > 2 }

# Inject / Reduce array (inject parameter is the initial value and block is the accumulator).
[1, 2, 3].inject(0) { |sum, item| sum + item } # returns 6
[1, 2, 3].inject(1) { |sum, item| sum + item } # returns 7

; -----------------------------------------------------------------------------

% ruby, switch, snippet

# Switch statement
score = 70
result = case score
         when 0..59 then 'Fail'
         when 60..69 then 'Pass'
         when 70..79 then 'Good'
         when 80..89 then 'Very good'
         when 90..100 then 'Excellent'
         else 'Invalid score'
         end
puts "Score is #{result}"

; -----------------------------------------------------------------------------

% ruby, variable, snippet

# Check if variable exists.
puts arr if defined? arr

# Pretty print a variable in the console.
puts variable.inspect

; -----------------------------------------------------------------------------

% ruby, loop, snippet

# For loop by index.
for i in 0..3
  print "#{i} "
end

# Times loop.
5.times { |j| print "#{j} " }

# While loop.
result = []
while i < 10
  print "#{i} "
  i += 1
  # We can skip a loop.
  next if i.even?

  result << i

  # We can add a condition to break the loop.
  break if i == 5
end

# Until loop.
i = 0
# Use `until` instead of `while` for reverse condition.
until i == 3
  print "#{i} "
  i += 1
end

# Upto loop.
1.upto(3) { |j| print "#{j} " }
'a'.upto('d') { |c| print "#{c} " }

# Downto loop.
3.downto(1) { |j| print "#{j} " }

# Foreach.
for item in array
  result << item.upcase
end
array.each { |item| result << item.upcase } # better

; -----------------------------------------------------------------------------

% ruby, symbols, snippet

# Get all symbols.
Symbol.all_symbols.map { |x| x.to_s }

# Transform string to symbol.
'hello'.to_sym

# Dynamically create a symbol.
("cats" + "dogs").to_sym

; -----------------------------------------------------------------------------

% ruby, hash, snippet

# Create new hash.
hash = Hash.new # default value will be `nil`
hash = Hash.new('foo') # default value will be 'foo' if we try to access with a non-existing key
hash = Hash.new { |h, key| h[key] = [] } # create an Array for each key
hash.default = 'another default' # we can define the default value afterward, not sure what is the use case for this...
hash = {}
hash = {:foo => 'foo', :bar => 'bar'}
hash = {foo: 'foo', bar: 'bar'} # prefered syntax

# Access to a element of hash.
hash[:foo] # returns `nil` if key does not exist
hash.fetch(:foo) # raise a `KeyError` exception if key does not exist
hash.fetch(:foo, 'default value') # get the value if the key exists, 'default value' otherwise
hash.fetch(:foo) { |key| 'default value'} # get the value if the key exists, otherwise execute supplied block and return the value

# Get hash keys.
hash.keys

# Get hash values.
hash.values

# Check if key exists in hash.
hash.keys.include?('key1')

# Check if hash contains a value.
hash.values.include?('value1')

# Merge two hashes.
hash.merge(another_hash) # values from the right takes precedence!

; -----------------------------------------------------------------------------

% ruby, method, snippet

# Create a method with default value.
def my_method(arg1, arg2 = 2)
  arg1 + arg2
end

# Create a method with a keyword.
def method_with_keyword_arguments(one: 1, two: 'two')
  [one, two]
end
assert_equal [1, 'two'], method_with_keyword_arguments
assert_equal %w[one two], method_with_keyword_arguments(one: 'one')
assert_equal [1, 2], method_with_keyword_arguments(two: 2)

# Create static method.
class Foo
  def self.my_method
    'You can call Foo.my_method'
  end
end

# Execute a method reflection-like / Send message to object.
class MessageCatcher
  def add_a_payload(*args)
    args
  end
end
mc.add_a_payload(3, 4, nil, 6) # [3, 4, nil, 6]
mc.send(:add_a_payload, 3, 4, nil, 6) # same


; -----------------------------------------------------------------------------

% ruby, exception, snippet

# Handling exception.
result = nil
begin
  raise 'Oops' # or `fail 'Oops'`, it's the same
rescue StandardError
  result = :error_value
ensure
  result = :always_run
end

assert_equal :always_run, result

; -----------------------------------------------------------------------------

% ruby, file, snippet

# Read file line by line.
File.open('some_file.txt') do |file|
  upcase_lines = file.map { |line| line.strip.upcase }
end
File.open('some_file.txt').each_line |line|
  puts line.strip.upcase
end

# Write to file.
File.open('some_file.txt', 'w') do |file|
  file.write('some text')
end

; -----------------------------------------------------------------------------

% ruby, block, snippet

# Create a lambda.
add_one = lambda { |n| n + 1 }
add_one = ->(n) { n + 1 } # Alternative syntax
assert_equal 11, add_one.call(10)

# Create a method with explicit block.
def method_with_explicit_block(&block)
  block.call(10)
end
add_one = lambda { |n| n + 1 }
method_with_explicit_block(&add_one)
method_with_explicit_block { |n| n + 1 }

; -----------------------------------------------------------------------------

% ruby, function, snippet

# Create sandwich code.
def file_sandwich(file_name)
  file = open(file_name)
  yield(file)
ensure
  file.close if file
end

file_sandwich('some_file.txt') do |file|
  count = 0
  while file.gets
    count += 1
  end
  count
end

; -----------------------------------------------------------------------------

% ruby, classes, snippet

# Create a class with getter accessors.
class Dog
  attr_reader :name # getter automatically defined

  def set_name(name)
    @name = name
  end
end
fido.set_name('Fido')
puts fido.name # prints 'Fido'

# Create a class with getter and setter accessors.
class Dog
  attr_accessor :name # getter & setter automatically defined
end
fido.name = 'Fido'
puts fido.name # prints 'Fido'

# Create a class with overloading constructor (argument must be set, otherwise a `ArgumentError` is raised!).
class Dog
  attr_reader :name
  def initialize(initial_name)
    @name = initial_name
  end
end
fido = Dog.new('Fido')

# Get variables of an instance.
class Dog
  def set_name(name)
    @name = name
  end
end
fido = Dog.new
fido.instance_variables # returns []
fido.set_name('Fido')
fido.instance_variables # returns [:@name]

# Call getter by reflection.
fido.instance_variable_get('@name')
fido.instance_eval("@name")  # string version
fido.instance_eval { @name } # block version

; -----------------------------------------------------------------------------

% ruby, metaprogramming, snippet

# Create instance method at runtime.
; src: https://www.toptal.com/ruby/ruby-metaprogramming-cooler-than-it-sounds
class Developer
  def method_missing method, *args, &block
    return super method, *args, &block unless method.to_s =~ /^coding_\w+/
    self.class.send(:define_method, method) do
      p "writing " + method.to_s.gsub(/^coding_/, '').to_s
    end
    self.send method, *args, &block
  end
end

developer = Developer.new
developer.coding_frontend
developer.coding_backend
developer.coding_debug

# Create class method at runtime.
class Developer
  define_method :frontend do |*my_arg|
    my_arg.inject(1, :*)
  end

  class << self
    def create_backend
      singleton_class.send(:define_method, "backend") do
        "Born from the ashes!"
      end
    end
  end
end
developer = Developer.new
Developer.backend # raise NoMethodError
Developer.create_backend
Developer.backend

; -----------------------------------------------------------------------------

% ruby, kernel, snippet

# Kernel#`: Call shell command and assign standard output to variable.
; https://docs.ruby-lang.org/en/master/syntax/literals_rdoc.html#label-Percent+Strings 
value = `echo 'hi'`

cmd = "echo 'hi'"
value = `#{cmd}`

value = %x(echo hi)
value = %x[#{cmd}]

# Kernel#system: Execute shell command in a subshell. Returns true if the command was found and run successfully, false otherwise.
; http://ruby-doc.org/core/Kernel.html#method-i-system
was_good = system('echo "hi"')

# Kernel#exec: Replace the current process by running the given shell command. Returns none.
; http://ruby-doc.org/core/Kernel.html#method-i-exec
exec('echo "hi"')

# Get exit status from shell command called by Kernel#` or Kernel#system.
$?.exitstatus

; -----------------------------------------------------------------------------

% ruby, web, snippet

# Simple web server
; https://www.rubyguides.com/2016/08/build-your-own-web-server/
require 'socket'
server = TCPServer.new('localhost', 8081)
loop do
  client = server.accept

  response = <<~RESPONSE
    HTTP/1.1 200
    Content-Length: 0

  RESPONSE

  client.write(response)
  client.close
end
