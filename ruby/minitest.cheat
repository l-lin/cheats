% ruby, minitest

# Ensures that test is true.
assert( test, [msg] )

# Ensures that test is false.
assert_not( test, [msg] )

# Ensures that expected == actual is true.
assert_equal( expected, actual, [msg] )

# Ensures that expected != actual is true.
assert_not_equal( expected, actual, [msg] )

# Ensures that expected.equal?(actual) is true.
assert_same( expected, actual, [msg] )

# Ensures that expected.equal?(actual) is false.
assert_not_same( expected, actual, [msg] )

# Ensures that obj.nil? is true.
assert_nil( obj, [msg] )

# Ensures that obj.nil? is false.
assert_not_nil( obj, [msg] )

# Ensures that obj is empty?.
assert_empty( obj, [msg] )

# Ensures that obj is not empty?.
assert_not_empty( obj, [msg] )

# Ensures that a string matches the regular expression.
assert_match( regexp, string, [msg] )

# Ensures that a string doesn't match the regular expression.
assert_no_match( regexp, string, [msg] )

# Ensures that obj is in collection.
assert_includes( collection, obj, [msg] )

# Ensures that obj is not in collection.
assert_not_includes( collection, obj, [msg] )

# Ensures that the numbers expected and actual are within delta of each other.
assert_in_delta( expected, actual, [delta], [msg] )

# Ensures that the numbers expected and actual are not within delta of each other.
assert_not_in_delta( expected, actual, [delta], [msg] )

# Ensures that the numbers expected and actual have a relative error less than epsilon.
assert_in_epsilon ( expected, actual, [epsilon], [msg] )

# Ensures that the numbers expected and actual have a relative error not less than epsilon.
assert_not_in_epsilon ( expected, actual, [epsilon], [msg] )

# Ensures that the given block throws the symbol.
assert_throws( symbol, [msg] ) { block }

# Ensures that the given block raises one of the given exceptions.
assert_raises( exception1, exception2, ... ) { block }

# Ensures that obj is an instance of class.
assert_instance_of( class, obj, [msg] )

# Ensures that obj is not an instance of class.
assert_not_instance_of( class, obj, [msg] )

# Ensures that obj is an instance of class or is descending from it.
assert_kind_of( class, obj, [msg] )

# Ensures that obj is not an instance of class and is not descending from it.
assert_not_kind_of( class, obj, [msg] )

# Ensures that obj responds to symbol.
assert_respond_to( obj, symbol, [msg] )

# Ensures that obj does not respond to symbol.
assert_not_respond_to( obj, symbol, [msg] )

# Ensures that obj1.operator(obj2) is true.
assert_operator( obj1, operator, [obj2], [msg] )

# Ensures that obj1.operator(obj2) is false.
assert_not_operator( obj1, operator, [obj2], [msg] )

# Ensures that obj.predicate is true, e.g. assert_predicate str, :empty?
assert_predicate ( obj, predicate, [msg] )

# Ensures that obj.predicate is false, e.g. assert_not_predicate str, :empty?
assert_not_predicate ( obj, predicate, [msg] )

# Ensures that the error class has been reported, e.g. assert_error_reported IOError { Rails.error.report(IOError.new("Oops")) }
assert_error_reported(class) { block }

# Ensures that no errors have been reported, e.g. assert_no_error_reported { perform_service }
assert_no_error_reported { block }

# Ensures failure. This is useful to explicitly mark a test that isn't finished yet.
flunk( [msg] )

