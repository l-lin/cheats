% shell, script

# Print error messages to stderr
<cmd> || echo 'cmd failed' >/dev/stderr

# Print error messages to stderr in a function
err() {
  echo "\033[0;41m[ERR] $*\033[0m" >>/dev/stderr
}

# Generate random number
echo $((1 + RANDOM % 10))

# Pause script until keypress
read -r -p '<message>' </dev/tty

# Check if process is running (returns 1 if there's a running process, 0 otherwise)
check_process() {
  pgrep -nc "${1}"
}

# -----------------------------------------------------------------

% shell, script, string manipulation

# Replace first match pattern in String
echo "${<variable>/<pattern>/<replacement>}"

# Replace all match in String
echo "${<variable>//<pattern>/<replacement>}"

# Replace match at the beginning in String
echo "${<variable}/#<pattern>/<replacement}"

# Replace match at the end in String
echo "${<variable>/%<pattern>/<replacement}"

# Add prefix to array items
echo "${<variable>[@]/#/<prefix>}"

# Substring from beginning (zero-based offset): var='0123456789abcdef' && echo "${var:3}" => 3456789abcdef
echo "${<variable>:<end_index>}"

# Substring from offset with length: var='0123456789abcdef' && echo "${var:3:4}" => 3456
echo "${<variable>:<start_index>:<length>}"

# Substring from the end (negative offset, use a space or parenthese): var='0123456789abcdef' && echo "${var:(-6)}" => abcdef
echo "${<variable>:(-<end_index>)}"

# Substring from offset with negative length to count from the end: var='0123456789abcdef' && echo "${var:3:-5}" => 3456789a
echo "${<variable>:<start_index>:-<length>}"

# Delete a pattern from the beginning of a String with the shortest match: a='I am a string' && echo "${a#*a}" => m a string
echo "${<variable>#*<pattern>}"

# Delete a pattern from the beginning of a String with the longest match: a='I am a string' && echo "${a##*a}" => string
echo "${<variable>##*<pattern>}"

# -----------------------------------------------------------------

% shell, script, array

# Create an array
array=('first element' 'second element')

# Assign script's input arguments in array
array=("$@")

# Print array element at index 0 of an array
echo "${array[0]}"

# Print last array element of an array
echo "${array[-1]}"

# Print all elements of an array
echo "${array[@]}"

# Print all elements from index 1 of an array
echo "${array[@]:1}"

# Print 3 elements from index 1 of an array
echo "${array[@]:1:3}"

# Print first 3 characters of first element of an array
echo "${array[0]:0:3}"

# Append array
array+=('fourth element' 'fifth element')

# Prepend array
array=('new element' "${array[@]}")

# Print array indexes
echo "{${!array[@]}}"

# Merge arrays
array3=("${array1[@]} ${array2[@]}")

# Print the array length
echo "${#array[@]}"}

# Delete array indexes
unset -v 'array[1]'

# Delete an array
unset array

# -----------------------------------------------------------------

% shell, script, map

# Declare map
declare -A map=([john]=75 [doe]=82 [ann]=83 [ava]=72)

# Loop from map
declare -A map=([john]=75 [doe]=82 [ann]=83 [ava]=72)
for key in "${!map[@]}"; do
    echo "${key}: ${map[${key}]}"
done

# Append elements to map
declare -a map
map+=(1 2 3)
map+=(4 5 6)

# Remove element from map
unset "map[${i}]"

# -----------------------------------------------------------------

% shell, script, loop

# Loop numerical
for i in {<start>..<end>..<step>}; do
  echo $i
done

# Loop from array using for loop
inputs=('foo' 'bar')
for i in ${inputs[@]}; do
  echo $i
done

# Loop from array using for loop
for (( i=0; i<${#arr[@]}; i++ )); do
  echo "${arr[$i]}"
done

# Loop from array using for while loop
i=0
while [ $i -lt ${#arr[@]} ]; do
  echo "${arr[$i]}"
  i="$((i + 1)"
done

# Loop from array using for while loop
i=0
while (( $i < ${#arr[@]} )); do
  echo "${arr[$i]}"
  i="$((i + 1)"
done

# Change file extensions
for i in *.<source_extension>; do
  mv $i ${i//<source_extension>/<target_extension>}
done

# For loop continue
for i in [series]; do
  command 1
  command 2
  if [ condition ]; then
    continue # skip to the next value in "series"
  fi
  command 3
done

# For loop break
for i in [series]; do
  command 4
  if [ condition ]; then
    command 5 # Command if the loop needs to be broken
    break
  fi
  command 6 # Command to run if the "condition" is never true
done

# Execute command until condition is true
i=5
until [[ i -eq 10 ]]; do
  echo "i=$i"
  i="$((i+1))"
done

# Convert String to array
mapfile -t array < <(mycommand)

# Ternary operator
a=$([ "$b" == 5 ] && echo "$c" || echo "$d")

# -----------------------------------------------------------------

% shell, script, logging

# Pretty logging
green='\e[0;32m'
orange='\e[0;33m'
red='\e[0;31m'
escape='\e[0m'

info() {
  echo -e "${green}INF ${escape} ${1}"
}
warn() {
  >&2 echo -e "${orange}WAR ${escape} ${1}"
}
error() {
  >&2 echo -e "${red}ERR ${escape} ${1}"
}

# -----------------------------------------------------------------

% shell, script, template

# Bash script template
set -euo pipefail

foo=${FOO:-foo}

greet_user() {
  local name="${1}"
  if [[ -z "${name}" ]]; then
    read -p "person to greet: " -r name
  fi
  echo "Hello, ${name}"
}

show_help() {
  cat << EOF
Script description here

Usage: ${0##*/} {flags} {args}

Examples:
    # Prompt name when greeting
      ${0##*/} greet
    # Greet Louis without prompting
      ${0##*/} greet --name Louis
    # Use foo
      FOO=foobar ${0##*/} foo
    # Use bar
      ${0##*/} bar azerty

Available commands:
    greet                 Greet someone
    foo                   Display 'foo'
    bar                   Display 'bar'

Flags:
    -h, --help            Display help
    -n, --name            Name of the person to greet
    -v, --verbose         Verbose

Environment variables:
    FOO                   Some environment variable to set

EOF
}

main() {
  local name=
  local verbose=false
  # Flags in bash tutorial here: /usr/share/doc/util-linux/examples/getopt-parse.bash
  TEMP=$(getopt -o 'hn:v' --long 'help,name:,v' -n "${0##*/}" -- "$@")
  eval set -- "$TEMP"
  unset TEMP
  while true; do
    case "${1}" in
      '-h'|'--help')
        show_help
        exit
        ;;
      '-n'|'--name')
        name="${2}"
        shift 2
        continue
        ;;
      '-v'|'--verbose')
        verbose=true
        echo "Verbose mode: ${verbose}"
        shift
        continue
        ;;
      '--')
        shift
        break
        ;;
      *)
        break
        ;;
    esac

    shift
  done

  case "${1}" in
    'greet')
      greet_user "${name}"
      ;;
    'foo')
      echo "foo ${foo}"
      ;;
    'bar')
      echo "bar ${2}"
      ;;
    *)
      show_help
      ;;
  esac
}

main "$@"
