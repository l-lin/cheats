% awslocal

# Local AWS
aws --endpoint-url http://localhost:4566 <command>

# -----------------------------------------------------------------

% awslocal, cloudwatch

# Tail CloudWatch logs in Localstack
awslocal logs tail '<log_group_name>' --follow --since <log_since> 2>&1

$ log_group_name: aws --endpoint-url http://localhost:4566 logs describe-log-groups --output json | jq -r '.logGroups[].logGroupName'
$ log_since: echo -e '10m\n1d\n1w\n'

# -----------------------------------------------------------------

% awslocal, lambda

# Create an AWS Lambda in Localstack
awslocal lambda create-function \
  --function-name <function_name_to_create> \
  --runtime <runtime> \
  --zip-file fileb://<lambda_archive_file> \
  --handler '<handler>::handleRequest' \
  --environment "Variables={<env_variables>}" \
  --role arn:aws:iam::000000000000:role/lambda-role \
  --no-cli-pager

# Update an AWS Lambda code in Localstack
awslocal lambda update-function-code \
  --function-name <function_name> \
  --zip-file fileb://<lambda_archive_file> \
  --no-cli-pager

# Delete an AWS Lambda in Localstack
awslocal lambda delete-function --function-name <function_name>

# Invoke an AWS Lambda in Localstack
awslocal lambda invoke \
  --function-name <function_name> \
  --payload "$(jo <payload>)" \
  --invocation-type <invocation_type> \
  --cli-binary-format <binary_format> \
  --no-cli-pager \
  <output_file>

# Invoke a local AWS Lambda with curl
curl -X POST "http://localhost:8080/2015-03-31/functions/function/invocations" -d "$(jo <payload>)"

# Get AWS Lambda configuration in Localstack
awslocal lambda get-function-configuration --function-name <function_name> --output json

$ function_name: aws --endpoint-url http://localhost:4566 lambda list-functions --output json | jq -r '.Functions[].FunctionName'
$ output_file: echo -e '/tmp/output.txt\n'
$ invocation_type: echo -e 'RequestResponse\nEvent\nDryRun'
$ binary_format: echo -e 'raw-in-base64-out\nbase64'
$ payload: echo -e 'name=LLI\n'
$ runtime: echo -e 'java17\njava11\nnodejs18.x\nnodejs16.x\npython3.10\ngo1.x\n'
$ lambda_archive_file: find . -type f -name '*.zip' -or -name '*.jar'
$ archive_filename_without_ext: echo '<lambda_archive_file>' | awk -F'/' '{ print $NF }' | awk -F'.' '{ print $1 }'
$ function_name_to_create: echo -e "<archive_filename_without_ext>\n"
$ handler: echo -e "$(rg -l 'import com.amazonaws.services.lambda.runtime.RequestHandler;' | rg '<archive_filename_without_ext>' | sed -E 's~.*/java/(.*)\.java~\1~' | sed 's~/~.~g')\norg.springframework.cloud.function.adapter.aws.FunctionInvoker\n"
$ env_variables: echo -e 'AWS_BUCKET=hello-aws-lambda-localhost,APP_VERSION=1.0.0-SNAPSHOT\n'

# -----------------------------------------------------------------

% awslocal, sqs

# List SQS queues in Localstack
awslocal sqs list-queues

# Send SQS message in Localstack
awslocal sqs send-message --queue-url <queue_url> --message-body '$(jo <payload>)'

$ queue_url: awslocal sqs list-queues --out json | jq -r '.QueueUrls[]'
$ payload: echo -e 'name=LLI\n'

