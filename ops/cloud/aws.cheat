% aws, common

# AWS CLI in interactive prompt
aws --cli-auto-prompt

# Find AWS resources by tag
aws --profile <profile> resourcegroupstaggingapi get-resources --tag-filters "Key=<tag_key>,Values=<tag_value>"

$ profile: cat ${HOME}/.aws/credentials ${HOME}/.aws/config | grep '\[' | sed -e 's/\[//' -e 's/\]//' -e 's/profile //' | sort | uniq
$ region: echo -e 'eu-west-3\neu-west-1\nus-east-1'

# -----------------------------------------------------------------

% aws, s3
@ aws, common

# Create S3 bucket
aws s3 mb s3://<bucket>

# List S3 objects
aws --profile <profile> s3 ls s3://<bucket>/<key>

# Copy S3 object
aws --profile <profile> s3 cp s3://<bucket>/<key> .

$ bucket: aws --profile <profile> s3 ls | awk '{ print $3 }'
$ key: echo -e "$(${PASTE_FROM_CLIPBOARD})\n"

# -----------------------------------------------------------------

% aws, sqs
@ aws, common

# Create SQS queue
aws sqs create-queue --queue-name <queue>

# List SQS queues
aws --profile <profile> sqs list-queues

# Send SQS message
aws --profile <profile> sqs send-message --queue-url <queue_url> --message-body '<message_body>'

$ queue_url: aws --profile <profile> sqs list-queues --out json | jq -r '.QueueUrls[]'

# -----------------------------------------------------------------

% aws, dynamodb
@ aws, common

# Create dynamodb table
awslocal dynamodb create-table \
    --table-name <table> \
    --key-schema AttributeName=id,KeyType=HASH \
    --attribute-definitions AttributeName=id,AttributeType=S \
    --billing-mode PAY_PER_REQUEST

# -----------------------------------------------------------------

% aws, ec2
@ aws, common

# Get EC2 instance IPs in hosts format
env=<env> \
  && region=<region> \
  && aws --profile <profile> \
    ec2 describe-instances \
    --region "${region}" \
    --filters "Name=tag:Environment,Values=${env}" \
    --output json \
    --query 'Reservations[].Instances[]' \
    | jq -r '.[]
      | .PublicIpAddress as $PublicIpAddress
      | .Tags[]
      | select(.Key == "Name")
      | .Value as $Name
      | "\($PublicIpAddress) \($Name)"' \
    | sed 's/_/-/g'

# Synchronize hosts with EC2 instance IPs
env=<env> \
  && region=<region> \
  && today=$(date '+%Y-%m-%dT%H%M%SZ') \
  && hosts_tmp_path="/tmp/hosts_${today}" \
  && cp /etc/hosts "${hosts_tmp_path}.bak" \
  && cp /etc/hosts "${hosts_tmp_path}" \
  && sed -i "/${env}/d" "${hosts_tmp_path}" \
  && echo "# ${env}" >> "${hosts_tmp_path}" \
  && aws --profile <profile> \
    ec2 describe-instances \
    --region "${region}" \
    --filters "Name=tag:Environment,Values=${env}" \
    --output json \
    --query 'Reservations[].Instances[]' \
    | jq -r '.[]
      | .PublicIpAddress as $PublicIpAddress
      | .Tags[]
      | select(.Key == "Name")
      | .Value as $Name
      | "\($PublicIpAddress) \($Name)"' \
    | sed 's/_/-/g' >> "${hosts_tmp_path}" \
  && cat "${hosts_tmp_path}" | sudo tee /etc/hosts > /dev/null \
  && rm "${hosts_tmp_path}"

# Get EC2 instance metadata
; see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
ssh <host> \
  'curl -s http://169.254.169.254/latest/meta-data/'

$ host: cat /etc/hosts | grep -v '#' | awk '{ print $2 }' | sort | uniq

# Find unknown IP address in AWS VPC
aws --profile <profile> ec2 describe-network-interfaces --filters "Name=addresses.private-ip-address,Values=<ip>" | jless

# -----------------------------------------------------------------

% aws, cloudwatch
@ aws, common

# Tail CloudWatch logs
faketty aws --profile <profile> logs tail '<log_group_name>' --follow --since <log_since> 2>&1 | spacer

$ log_group_name: aws --profile <profile> logs describe-log-groups --output json | jq -r '.logGroups[].logGroupName'
$ log_since: echo -e '10m\n1d\n1w\n'

# -----------------------------------------------------------------

% aws, lambda
@ aws, common

# Get AWS Lambda configuration
aws --profile <profile> lambda get-function-configuration --function-name <function_name> --output json

# Invoke an AWS Lambda
aws --profile <profile> \
  lambda invoke \
  --function-name <function_name> \
  --payload "$(jo <payload>)" \
  --invocation-type <invocation_type> \
  --cli-binary-format <binary_format> \
  --no-cli-pager \
  <output_file>

$ function_name: aws --profile <profile> lambda list-functions --output json | jq -r '.Functions[].FunctionName'
$ output_file: echo -e '/tmp/output.txt\n'
$ invocation_type: echo -e 'RequestResponse\nEvent\nDryRun'
$ binary_format: echo -e 'raw-in-base64-out\nbase64'
$ payload: echo -e 'name=LLI\n'
