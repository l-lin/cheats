% git, common

$ file_path: find . -type f -not -path './.git/*' -not -path './target/*' -not -path './node_modules/*'

% git
@ git, common

# Rewrite git history
git rebase -i "HEAD~$(git cherry -v <target_branch> $(git rev-parse --abbrev-ref HEAD) | wc -l)"

# Create new git branch from current HEAD
git switch -c <jira_id>/<branch_name>

# Git commit with conventional commit syntax
git add -A && git commit -m "<commit_type>($(git rev-parse --abbrev-ref HEAD | awk -F'/' '{ print $2 }')): <git_msg>"

# Git push remote
git push -u origin $(git rev-parse --abbrev-ref HEAD)

# Pattern to search on revisions
git show :/<pattern>

# Remove sensitive files from git history
git filter-repo --path <file_path> --invert-paths

# Open Git quick stats in interactive mode
docker run --rm -it -v $(pwd):/git arzzen/git-quick-stats

# List all files added to staging area
git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g'

# Pull with submodules
git submodule update --recursive --remote

# Create a shallow clone with only HEAD.
git clone --depth 1

# Sparse checkout only files at the root.
; src: https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/
git sparse-checkout init --cone && git checkout main

# Sparse checkout only files in specific directories (recursive).
; src: https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/
git sparse-checkout set <dir1> <dir2> && git checkout main

# Copy current git branch name to clipboard.
git rev-parse --abbrev-ref HEAD | ${COPY_TO_CLIPBOARD}"

$ target_branch: git for-each-ref --format='%(refname:short)' refs/heads/
$ commit_type: echo -e 'feat\nfix\nchore\nrefactor\nci\nbuild'
$ jira_id: echo -e "$(${PASTE_FROM_CLIPBOARD})\n"

% git, blame
@ git, common

# Git blame specific file lines.
git blame <start_line>:<end_line> <file_path>

% git, log
@ git, common

# Get all git commits between two commits.
git log --pretty=format:"%h %s" <start_git_commit>..<end_git_commit> | awk '{ print "- " $0 }' | ${COPY_TO_CLIPBOARD}

# Get log history of specific file lines.
git log -L <start_line>,<end_line>:<file_path>

# Get log history of commits whose content has the search word on specific file.
git log -L :<search_word>:<file_path>

# Get log history of commits whose content has the search word.
git log -S <search_word> -p

# Grep logs
git log -p -G'<pattern>' <file_path>

# Find all files that were deleted
git log --diff-filter=D --summary | grep delete

# Display full history for a given file
git log --oneline --graph --follow --all --full-history -- <file_path>

# Display log history with all changes
git log -p <rev>

# Find 10 most modified files
git log --format=format: --name-only | grep -v '^$' | sort | uniq -c | sort -rg | head -10

$ start_git_commit: echo -e "$(${PASTE_FROM_CLIPBOARD})\n"
$ end_git_commit: echo -e 'HEAD\n'

% git, worktree

# Create a new worktree from an existing branch.
git worktree add <new_worktree_path> <branch_name> && cd <new_worktree_path>

# Create a new worktree.
git worktree add <new_worktree_path> -b <branch_name> && cd <new_worktree_path>

# List all worktrees.
git worktree list

# Delete a worktree.
git worktree remove <worktree_path>

$ branch_name: git branch -a | grep 'remotes/origin' | sed 's~remotes/origin/~~' | grep -v 'HEAD ->' | sed 's/ //g'
$ sanitized_branch_name: echo -e "<branch_name>" | sed 's~/~-~g'
$ new_worktree_path: echo -n "../<folder_name>-<sanitized_branch_name>"
$ folder_name: echo -n "${PWD##*/}"
$ worktree_path: git worktree list --- --column 1 --delimiter '\s\s+'

$ git, maintenance

# Start new git maintenance to accelerate git operations.
; This will write in .gitconfig file. So you might want to edit the file yourself.
git maintenance start

# Cache commit history for faster git log.
git commit-graph write

# Set git project for faster git status
; ⚠️ Beware, it's using a single process per repository!
; src: https://blog.gitbutler.com/how-git-core-devs-configure-git/
git config core.fsmonitor true && git config core.untrackedCache true

