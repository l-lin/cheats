% git

# Rewrite git history
git rebase -i "HEAD~$(git cherry -v <target_branch> $(git rev-parse --abbrev-ref HEAD) | wc -l)"

# Create new git branch from current HEAD
git checkout -b <branch_type>/CLOUD-<jira_id>/<branch_name>

# Git commit with conventional commit syntax
git add -A && git commit -m "<commit_type>($(git rev-parse --abbrev-ref HEAD | awk -F'/' '{ print $2 }')): <git_msg>"

# Git push remote
git push -u origin $(git rev-parse --abbrev-ref HEAD)

# Grep logs
git log -p -G'<pattern>' <file_path>

# Find all files that were deleted
git log --diff-filter=D --summary | grep delete

# Display full history for a given file
git log --oneline --graph --all --full-history -- <file_path>

# Find 10 most modified files
git log --format=format: --name-only | grep -v '^$' | sort | uniq -c | sort -rg | head -10

# Pattern to search on revisions
git show :/<pattern>

# Remove sensitive files from git history
git filter-branch --force --index-filter "git rm --cached --ignore-unmatch <file_path>" --prune-empty --tag-name-filter cat -- --all

$ target_branch: git for-each-ref --format='%(refname:short)' refs/heads/
$ branch_type: echo -e 'feature\nbugfix\ntask\nrefactor'
$ commit_type: echo -e 'feat\nfix\nchore\nrefactor\nci\nbuild'
$ file_path: find . -type f -not -path './.git/*' -not -path './target/*' -not -path './node_modules/*'

